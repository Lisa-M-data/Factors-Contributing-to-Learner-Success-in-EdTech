-- 1. Explore the data schema to understand the columns.
SELECT
  column_name,
  data_type,
  is_nullable
FROM
  `student_pip2.INFORMATION_SCHEMA.COLUMNS`
WHERE
  table_name = 'student_per';

##Results: 

| Row | Column Name             | Data Type | Is Nullable | Total Records |
|-----|-------------------------|-----------|-------------|---------------|
| 3   | first_trial_appointment_date | TIMESTAMP | YES         | 124,517       |
| 4   | first_payment_date      | TIMESTAMP | YES         | 124,517       |
| 5   | os                      | STRING    | YES         | 124,517       |
| 6   | tutor                   | STRING    | YES         | 124,517       |
| 7   | job                     | STRING    | YES         | 124,517       |
| 8   | task_class              | FLOAT64   | YES         | 124,517       |
| 9   | average_score           | FLOAT64   | YES         | 124,517       |
| 10  | homework_done           | INT64     | YES         | 124,517       |
| 11  | paywall_paid            | BOOL      | YES         | 124,517       |
| 12  | school_name             | STRING    | YES         | 124,517       |
| 13  | desktop_enter           | BOOL      | YES         | 124,517       |
| 14  | nps_score               | FLOAT64   | YES         | 124,517       |
| 15  | add_homework_done       | INT64     | YES         | 124,517       |
| 16  | call_date               | TIMESTAMP | YES         | 124,517       |
| 17  | first_visit_date        | TIMESTAMP | YES         | 124,517       |
| 18  | region                  | STRING    | YES         | 124,517       |
| 19  | is_big_city             | BOOL      | YES         | 124,517       |



-- 2. Count the total number of records in the dataset.
SELECT
  COUNT(*) AS total_records
FROM
  `student_pip2.student_per`;

| Row | Column Name    | Data Type | Is Nullable | Total Records |
|-----|----------------|-----------|-------------|---------------|
| 1   | Total Records  |           |             | 124,517       |


-- 3. Explore student visits to the platform by the month of first visit.
SELECT
  FORMAT_DATE('%Y-%m', DATE(first_visit_date)) AS visit_month,
  COUNT(*) AS users
FROM
  `student_pip2.student_per`
GROUP BY
  visit_month
ORDER BY
  visit_month;

##Results

| **visit_month** | **users** |
|-----------------|----------|
| 2020-04         | 67,670   |
| 2020-05         | 55,168   |
| 2020-06         | 797      |
| 2020-07         | 71       |
| 2020-08         | 42       |
| 2020-09         | 769      |


-- 4. Explore what computer systems learners are using.
SELECT
  os,
  COUNT(*) AS user_count
FROM
  `student_pip2.student_per`
GROUP BY
  os
ORDER BY
  user_count DESC;

##Results: 

| **Row** | **OS**      | **User Count** |
|--------:|-------------|----------------|
| 1       | iOS         | 56,055         |
| 2       | Android     | 44,359         |
| 3       | Windows     | 22,934         |
| 4       | Mac OS      | 1,091          |
| 5       | Linux       | 49             |
| 6       | Unknown     | 16             |



-- 5. Explore how many students are visiting a tutor.
SELECT
  tutor,
  COUNT(*) AS user_count
FROM
  `student_pip2.student_per`
GROUP BY
  tutor
ORDER BY
  user_count DESC;

##Results

### Tutor Engagement Summary

| **Row** | **Tutor**         | **User Count** |
|---------|-------------------|----------------|
| 1       | No response       | 75,820         |
| 2       | Earlier           | 19,936         |
| 3       | I am doing now    | 14,783         |
| 4       | No                | 13,978         |

-- 6. Explore the types of jobs the learners have.
SELECT
  job,
  COUNT(*) AS user_count
FROM
  `student_pip2.student_per`
GROUP BY
  job
ORDER BY
  user_count DESC;

##Results: 

| **Row** | **Job**      | **User Count** |
|--------:|--------------|----------------|
| 1       | Unknown      | 85,909         |
| 2       | Finance      | 11,440         |
| 3       | Medicine     | 9,186          |
| 4       | Education    | 7,664          |
| 5       | IT           | 6,837          |
| 6       | Science      | 3,481          |

-- 7. Calculating the correlation between homework completion and average scores.
SELECT
  CORR(homework_done, average_score) AS correlation_coefficient
FROM
  `student_pip2.student_per`;

##Results:

| **Row** | **Correlation Coefficient** |
|--------:|-----------------------------|
| 1       | 0.0171                      |

##This indicates a very weak positive correlation, likely negligible in practical terms.

| **Correlation (r)** | **Strength**             | **Direction**        | **Interpretation**                                                                 |
|---------------------|--------------------------|-----------------------|------------------------------------------------------------------------------------|
| **+1.0**             | Perfect                  | Positive              | A perfect direct relationship; as one increases, the other always increases.       |
| **+0.7 to +0.9**     | Strong                   | Positive              | A strong relationship; higher values of one are associated with higher values of the other. |
| **+0.4 to +0.6**     | Moderate                 | Positive              | A moderate relationship, still fairly consistent.                                 |
| **+0.1 to +0.3**     | Weak                     | Positive              | A slight tendency for one variable to increase as the other does.                 |
| **0.0 to ±0.1**      | None or Negligible       | —                     | Essentially no linear relationship.                                               |
| **-0.1 to -0.3**     | Weak                     | Negative              | A slight tendency for one variable to decrease as the other increases.            |
| **-0.4 to -0.6**     | Moderate                 | Negative              | A moderate inverse relationship.                                                  |
| **-0.7 to -0.9**     | Strong                   | Negative              | A strong inverse relationship.                                                    |
| **-1.0**             | Perfect                  | Negative              | A perfect inverse relationship.                                                   |



-- 8. Exploring homework completion and average score grouping.
SELECT
  homework_done,
  COUNT(*) AS student_count,
  AVG(average_score) AS avg_score
FROM
  `student_pip2.student_per`
GROUP BY
  homework_done
ORDER BY
  avg_score DESC;

##Results

| Homework Done | Student Count | Average Score |
|---------------|---------------|---------------|
| 407           | 1             | 98            |
| 85            | 1             | 98            |
| 72            | 1             | 95            |
| 99            | 1             | 94            |
| 80            | 1             | 93            |
| 132           | 1             | 93            |
| 67            | 1             | 93            |
| 83            | 3             | 92            |
| 105           | 1             | 91            |
| 40            | 4             | 90            |
| 81            | 1             | 88            |
| 94            | 1             | 87            |
| 100           | 1             | 87            |
| 33            | 14            | 86            |
| 78            | 1             | 86            |
| 241           | 1             | 86            |
| 76            | 1             | 86            |
| 54            | 1             | 85            |
| 29            | 27            | 84            |
| 41            | 5             | 83            |
| 26            | 59            | 83            |
| 52            | 5             | 83            |
| 59            | 3             | 82            |
| 39            | 5             | 82            |
| 37            | 7             | 82            |
| 21            | 136           | 81            |
| 34            | 8             | 80            |
| 27            | 35            | 80            |
| 51            | 1             | 80            |
| 11            | 1267          | 80            |
| 36            | 12            | 80            |
| 13            | 752           | 80            |
| 9             | 2242          | 80            |
| 10            | 1685          | 79            |
| 7             | 3944          | 79            |
| 14            | 582           | 79            |
| 8             | 2856          | 79            |
| 18            | 236           | 79            |
| 180           | 2             | 79            |
| 15            | 475           | 79            |
| 12            | 966           | 79            |
| 5             | 7432          | 79            |
| 24            | 80            | 79            |
| 6             | 5448          | 79            |
| 16            | 359           | 79            |
| 20            | 150           | 79            |
| 19            | 190           | 79            |
| 4             | 10320         | 78            |
| 22            | 100           | 78            |
| 31            | 18            | 78            |
| 17            | 312           | 78            |
| 25            | 56            | 78            |
| 23            | 79            | 78            |
| 3             | 15047         | 78            |
| 50            | 4             | 78            |
| 2             | 23223         | 77            |
| 32            | 12            | 76            |
| 186           | 1             | 76            |
| 167           | 1             | 76            |
| 46            | 4             | 76            |
| 48            | 1             | 76            |
| 49            | 6             | 76            |
| 340           | 1             | 75            |
| 1             | 43644         | 75            |
| 30            | 16            | 75            |
| 56            | 1             | 75            |
| 53            | 2             | 74            |
| 28            | 26            | 73            |
| 123           | 1             | 73            |
| 35            | 10            | 73            |
| 65            | 2             | 73            |
| 66            | 2             | 71            |
| 43            | 2             | 71            |
| 47            | 2             | 71            |
| 64            | 2             | 70            |
| 45            | 2             | 70            |
| 233           | 1             | 70            |
| 2275          | 2             | 69            |
| 38            | 8             | 68            |
| 97            | 1             | 68            |
| 75            | 1             | 67            |
| 44            | 2             | 67            |
| 42            | 4             | 66            |
| 379           | 1             | 65            |
| 77            | 1             | 63            |
| 71            | 2             | 63            |
| 68            | 1             | 62            |
| 162           | 1             | 60            |
| 89            | 1             | 59            |
| 122           | 1             | 57            |
| 192           | 1             | 56            |
| 580           | 1             | 56            |
| 111           | 2             | 50            |
| 226           | 1             | 40            |
| 69            | 1             | 38            |
| 60            | 1             | 36            |
| 73            | 2             | 35            |
| 0             | 2579          | -             |


-- 9. Homework completion levels: Low, Medium, High.
SELECT
  CASE
    WHEN homework_done BETWEEN 0 AND 2 THEN 'Low'
    WHEN homework_done BETWEEN 3 AND 5 THEN 'Medium'
    ELSE 'High'
  END AS homework_level,
  COUNT(*) AS student_count,
  AVG(average_score) AS avg_score
FROM
  `student_pip2.student_per`
GROUP BY
  homework_level
ORDER BY
  homework_level;

##Results: 

| **Row** | **Homework Level** | **Student Count** | **Average Score** |
|--------:|--------------------|-------------------|-------------------|
| 1       | High               | 22,272            | 79.24             |
| 2       | Low                | 69,446            | 76.05             |
| 3       | Medium             | 32,799            | 78.24             |


-- 10. Explore the effect of tutor visits on average scores.
SELECT
  tutor,
  AVG(average_score) AS avg_score,
  COUNT(*) AS student_count
FROM
  `student_pip2.student_per`
WHERE
  average_score IS NOT NULL
GROUP BY
  tutor
ORDER BY
  avg_score DESC;

-- 11. Analyze whether frequent platform engagement affects scores.
SELECT
  desktop_enter,
  COUNT(*) AS user_count,
  AVG(average_score) AS avg_score
FROM
  `student_pip2.student_per`
GROUP BY
  desktop_enter
ORDER BY
  user_count DESC;

##Results:

| **Row** | **Desktop Entered** | **User Count** | **Average Score** |
|--------:|---------------------|----------------|-------------------|
| 1       | True                | 103,039        | 77.78             |
| 2       | False               | 21,478         | 74.54             |



-- 12. Explore the effect of job types on average scores.
SELECT
  job,                                -- Group by job type
  AVG(average_score) AS avg_score,    -- Calculate average score for each job type
  COUNT(*) AS student_count           -- Count the number of students in each job type
FROM
  `student_pip2.student_per`          -- Table containing student data
GROUP BY
  job                                 -- Group by job to analyze its impact
ORDER BY
  avg_score DESC;                     -- Sort by average score (highest to lowest)

| Row | Job       | Average Score | Student Count |
|-----|-----------|----------------|----------------|
| 1   | IT        | 80.09          | 6,837          |
| 2   | Science   | 79.30          | 3,481          |
| 3   | Finance   | 77.35          | 11,440         |
| 4   | Medicine  | 77.10          | 9,186          |
| 5   | *Unknown* | 77.02          | 85,909         |
| 6   | Education | 76.01          | 7,664          |
